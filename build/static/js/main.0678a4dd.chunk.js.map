{"version":3,"sources":["components/AddForm.js","components/ToDoItem.js","components/ToDoList.js","App.js","reportWebVitals.js","index.js"],"names":["AddForm","inputText","setInputText","todos","setTodo","setState","setStateHandler","e","target","value","className","onChange","type","onClick","preventDefault","text","completed","id","uniqueId","ToDoItem","todo","map","item","htmlFor","filter","t","ToDoList","filteredTodos","App","useState","state","setFilteredTodos","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgCeA,MA7Bf,YAAuE,IAArDC,EAAoD,EAApDA,UAAWC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAIjDC,EAAkB,SAACC,GACrBF,EAASE,EAAEC,OAAOC,QAStB,OACI,sBAAKC,UAAU,YAAf,UACI,iCACI,uBAAOD,MAAOR,EAAWU,SAhBZ,SAACJ,GACtBL,EAAaK,EAAEC,OAAOC,QAeuCG,KAAK,OAAOF,UAAU,mBAC3E,wBAAQG,QAXD,SAACN,GAChBA,EAAEO,iBACFV,EAAQ,GAAD,mBACAD,GADA,CAEH,CAACY,KAAMd,EAAWe,WAAW,EAAOC,GAAIC,UAC5ChB,EAAa,KAMwBU,KAAK,SAASF,UAAU,kBAArD,kBAEJ,sBAAKA,UAAU,eAAf,UACI,wBAAQG,QAASP,EAAiBG,MAAM,MAAMC,UAAU,cAAxD,iBACA,wBAAQG,QAASP,EAAiBG,MAAM,OAAOC,UAAU,cAAzD,kBACA,wBAAQG,QAASP,EAAiBG,MAAM,OAAOC,UAAU,cAAzD,yB,OCADS,MAxBf,YAAqD,IAAlCC,EAAiC,EAAjCA,KAAMjB,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,QAASa,EAAW,EAAXA,GAAIF,EAAO,EAAPA,KAezC,OACI,sBAAKL,UAAU,YAAf,UACI,uBAAOG,QAba,WACxBT,EAAQD,EAAMkB,KAAI,SAACC,GACf,OAAIA,EAAKL,KAAOG,EAAKH,GACV,2BACAK,GADP,IAEIN,WAAYM,EAAKN,YAGlBM,OAK8BV,KAAK,WAAWK,GAAIA,IACzD,uBAAOM,QAASN,EAAIP,UAAS,eAAUU,EAAKJ,UAAY,YAAc,IAAtE,SAA6ED,IAC7E,wBAAQF,QAlBG,WACfT,EAAQD,EAAMqB,QAAO,SAAAC,GAAC,OAAIA,EAAER,KAAOG,EAAKH,QAiBPP,UAAU,gBAAvC,SAAuD,mBAAGA,UAAU,2BCDjEgB,MAjBf,YAAoD,IAAjCvB,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASuB,EAAgB,EAAhBA,cAC/B,OACI,qBAAKjB,UAAU,YAAf,SACI,oBAAIA,UAAU,iBAAd,SACKiB,EAAcN,KAAI,SAACD,GAAD,OACf,aAD6B,CAC5B,EAAD,CAEIA,KAAMA,EACNL,KAAMK,EAAKL,KACXX,QAASA,EACTD,MAAOA,GAJFiB,EAAKH,YCgCnBW,MApCf,WACI,MAAkCC,mBAAS,IAA3C,mBAAO5B,EAAP,KAAkBC,EAAlB,KACA,EAAyB2B,mBAAS,IAAlC,mBAAO1B,EAAP,KAAcC,EAAd,KACA,EAA0ByB,mBAAS,OAAnC,mBAAOC,EAAP,KAAczB,EAAd,KACA,EAA0CwB,mBAAS,IAAnD,mBAAOF,EAAP,KAAsBI,EAAtB,KAeA,OAdAC,qBAAU,WACN,OAAQF,GACJ,IAAK,OACDC,EAAiB5B,EAAMqB,QAAO,SAAAJ,GAAI,OAAuB,IAAnBA,EAAKJ,cAC3C,MACJ,IAAK,OACDe,EAAiB5B,EAAMqB,QAAO,SAAAJ,GAAI,OAAuB,IAAnBA,EAAKJ,cAC3C,MACJ,QACIe,EAAiB5B,MAG1B,CAACA,EAAO2B,IAGP,sBAAKpB,UAAU,MAAf,UACI,iCACI,wCAEJ,cAAC,EAAD,CACIT,UAAWA,EACXC,aAAcA,EACdC,MAAOA,EACPC,QAASA,EACTC,SAAUA,IAEd,cAAC,EAAD,CAAUF,MAAOA,EAAOC,QAASA,EAASuB,cAAeA,QCxBtDM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0678a4dd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport uniqueId from 'lodash/uniqueId'; // Unique key/identifier for each task starting from 1\r\n\r\nfunction AddForm({inputText, setInputText, todos, setTodo, setState}) {\r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value) // Pass info here, create object\r\n    };\r\n    const setStateHandler = (e) => {  // Save which sort button was clicked last\r\n        setState(e.target.value)\r\n    }\r\n    const submitTodo = (e) => {\r\n        e.preventDefault(); // Prevent page refresh after submit\r\n        setTodo([\r\n            ...todos,\r\n            {text: inputText, completed: false, id: uniqueId()}])\r\n        setInputText(\"\");\r\n    };\r\n    return (\r\n        <div className=\"form-area\">\r\n            <form>\r\n                <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"add-todo-input\"/>\r\n                <button onClick={submitTodo} type=\"submit\" className=\"add-todo-button\">+</button>\r\n            </form>\r\n            <div className=\"sort-buttons\">\r\n                <button onClick={setStateHandler} value=\"all\" className=\"sort-button\">All</button>\r\n                <button onClick={setStateHandler} value=\"done\" className=\"sort-button\">Done</button>\r\n                <button onClick={setStateHandler} value=\"todo\" className=\"sort-button\">ToDo</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddForm;\r\n","import React from \"react\";\r\n\r\nfunction ToDoItem({todo, todos, setTodo, id, text}) {\r\n    const deleteTodo = () => {\r\n        setTodo(todos.filter(t => t.id !== todo.id))\r\n    };\r\n    const toggleTodoCompleted = () => {\r\n        setTodo(todos.map((item) => {\r\n            if (item.id === todo.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed // Reverse the state\r\n                };\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input onClick={toggleTodoCompleted} type=\"checkbox\" id={id}/>\r\n            <label htmlFor={id} className={`todo ${todo.completed ? \"completed\" : \"\"}`}>{text}</label>\r\n            <button onClick={deleteTodo} className=\"delete-button\"><i className=\"fas fa-trash-alt\"></i></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoItem;","import React from \"react\";\r\nimport ToDoItem from \"./ToDoItem\";\r\n\r\nfunction ToDoList({todos, setTodo, filteredTodos}) {\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <ul className=\"todo-list-item\">\r\n                {filteredTodos.map((todo) => (   // Map through all tasks to display them\r\n                    <ToDoItem\r\n                        key={todo.id}\r\n                        todo={todo}\r\n                        text={todo.text}\r\n                        setTodo={setTodo}\r\n                        todos={todos} />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport AddForm from \"./components/AddForm\";\nimport ToDoList from \"./components/ToDoList\";\n\nfunction App() {\n    const [inputText, setInputText] = useState(\"\"); // Hook\n    const [todos, setTodo] = useState([]);\n    const [state, setState] = useState(\"all\");  //\n    const [filteredTodos, setFilteredTodos] = useState([]); // Filter matching tasks to here\n    useEffect(() => {\n        switch (state) {\n            case \"done\":\n                setFilteredTodos(todos.filter(todo => todo.completed === true))\n                break;\n            case \"todo\":\n                setFilteredTodos(todos.filter(todo => todo.completed === false))\n                break;\n            default:\n                setFilteredTodos(todos);\n                break;\n        }\n    }, [todos, state]);\n\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>TODO</h1>\n            </header>\n            <AddForm\n                inputText={inputText}\n                setInputText={setInputText}\n                todos={todos}\n                setTodo={setTodo}\n                setState={setState}\n            />\n            <ToDoList todos={todos} setTodo={setTodo} filteredTodos={filteredTodos}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}